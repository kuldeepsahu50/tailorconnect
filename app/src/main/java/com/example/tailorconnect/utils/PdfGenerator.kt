package com.example.tailorconnect.utils

import android.content.Context
import android.net.Uri
import com.example.tailorconnect.data.model.Measurement
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Cell
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.element.Table
import com.itextpdf.layout.properties.TextAlignment
import com.itextpdf.layout.properties.UnitValue
import java.text.SimpleDateFormat
import java.util.*

class PdfGenerator(private val context: Context) {
    fun generateMeasurementPdf(measurement: Measurement): Uri {
        val fileName = "measurement_${measurement.id}_${System.currentTimeMillis()}.pdf"
        val file = java.io.File(context.cacheDir, fileName)
        
        PdfWriter(file).use { writer ->
            val pdfDoc = PdfDocument(writer)
            Document(pdfDoc).use { document ->
                // Add title
                val title = Paragraph("Measurement Details")
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontSize(20f)
                    .setBold()
                document.add(title)
                
                // Add customer info
                document.add(Paragraph("\n"))
                document.add(Paragraph("Customer Name: ${measurement.customerName}")
                    .setFontSize(14f))
                document.add(Paragraph("Date: ${formatDate(measurement.timestamp)}")
                    .setFontSize(12f))
                document.add(Paragraph("\n"))
                
                // Add measurements table
                val table = Table(UnitValue.createPercentArray(2))
                    .useAllAvailableWidth()
                    .setMarginTop(20f)
                    .setMarginBottom(20f)
                
                // Add header
                val headerCell1 = Cell().add(Paragraph("Measurement").setBold())
                val headerCell2 = Cell().add(Paragraph("Value").setBold())
                table.addHeaderCell(headerCell1)
                table.addHeaderCell(headerCell2)
                
                // Add measurement data
                measurement.dimensions.forEach { (key, value) ->
                    table.addCell(Cell().add(Paragraph(key)))
                    table.addCell(Cell().add(Paragraph(value)))
                }
                
                document.add(table)
                
                // Add footer
                document.add(Paragraph("\n"))
                document.add(Paragraph("Generated by TailorConnect")
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontSize(10f)
                    .setItalic())
            }
        }
        
        return Uri.fromFile(file)
    }
    
    private fun formatDate(timestamp: Long): String {
        val sdf = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault())
        return sdf.format(Date(timestamp))
    }
} 